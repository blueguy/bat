#!/usr/bin/python

## Binary Analysis Tool
## Copyright 2009-2013 Armijn Hemel for Tjaldur Software Governance Solutions
## Licensed under Apache 2.0, see LICENSE file for details

'''
CLI front end for running the scans in bat/bruteforcescan.py

See documentation in that file to see how it works.
'''

import sys, os, os.path, tempfile
from optparse import OptionParser
import ConfigParser
import bat.bruteforcescan
import datetime

def main(argv):
	config = ConfigParser.ConfigParser()
        parser = OptionParser()
	parser.add_option("-b", "--binary", action="store", dest="fw", help="path to binary file", metavar="FILE")
	parser.add_option("-c", "--config", action="store", dest="cfg", help="path to configuration file", metavar="FILE")
	parser.add_option("-o", "--outputfile", action="store", dest="outputfile", help="path to output file", metavar="FILE")
	parser.add_option("-d", "--directory", action="store", dest="fwdir", help="path to directory with files to be scanned", metavar="DIR")
	parser.add_option("-u", "--outputdir", action="store", dest="outdir", help="path to directory to write results to", metavar="DIR")

	(options, args) = parser.parse_args()
	if options.cfg != None:
		try:
        		configfile = open(options.cfg, 'r')
		except:
			parser.error("Need configuration file")
	else:
		parser.error("Need configuration file")

	if options.fw == None and options.fwdir == None:
        	parser.error("Path to binary file or directory needed")

	if options.fw != None and options.fwdir != None:
        	parser.error("Don't supply binary file and directory at the same time")

	if options.fw != None:
		if not os.path.exists(options.fw):
        		parser.error("No file to scan found")

		if options.outputfile == None:
        		parser.error("Path to output file needed")
		try:
			os.stat(options.outputfile)
			print >>sys.stderr, "output file already exists"
			sys.exit(1)
		except Exception, e:
			pass

	if options.fwdir != None:
		if options.outputfile != None:
			parser.error("-o/--outputfile cannot be used for directory scanning")
		if not os.path.exists(options.fwdir):
        		parser.error("firmware directory does not exist")
		if not os.path.isdir(options.fwdir):
        		parser.error("directory path is not a directory")

		if options.outdir == None:
        		parser.error("output directory not supplied")
		else:
			if not os.path.exists(options.outdir):
        			parser.error("output directory does not exist")
			if not os.path.isdir(options.outdir):
        			parser.error("output path is not a directory")

	config.readfp(configfile)
	scans = bat.bruteforcescan.readconfig(config)
	configfile.close()

	## check if there are any conflicts in the configuration file
	## conflicts are determined per phase
	for s in scans:
		if s == 'batconfig':
			continue
		scannames = set(map(lambda x: x['name'], scans[s]))
		if len(scannames) == 0:
			continue
		conflicts = set(reduce(lambda x, y: x + y, map(lambda x: x.get('conflicts', []), scans[s])))
		if scannames.intersection(conflicts) != set():
			errorstring = reduce(lambda x, y: x + " " + y, scannames.intersection(conflicts))
			print >>sys.stderr, "conflict in configuration file: %s" % errorstring
			sys.exit(1)

	scanfiles = []
	if options.fw != None:
		scanfiles.append((options.fw, options.outputfile))

	if options.fwdir != None:
		scanls = os.listdir(options.fwdir)
		for s in scanls:
			## first filter out symlinks, empty files, etc.
			scanpath = os.path.join(options.fwdir, s)
			if os.stat(scanpath).st_size == 0:
				continue
			if os.path.islink(scanpath):
				continue
			## template: "%s.tar.gz"
			outpath = os.path.join(options.outdir, "%s.tar.gz" % s)
			if not os.path.exists(outpath):
				scanfiles.append((scanpath, outpath))
			else:
				print >>sys.stderr, "output file for %s exists, skipping scan" % s

	origcwd = os.getcwd()
	for so in scanfiles:
		(scanfile, outputfile) = so
		scandate = datetime.datetime.utcnow()

		## force the cwd  to a known value. This is to prevent mysterious
		## errors in case some old results are cleaned up and the cwd is not
		## restored in the code that had to change cwd for some reason.
		os.chdir(origcwd)

		(tempdir, unpackreports) = bat.bruteforcescan.runscan(scans, scanfile)

		if not scans['batconfig'].has_key('output'):
			## no printing?
			pass
		else:
			output = bat.bruteforcescan.prettyprint(scans['batconfig'], unpackreports, scandate, scans, os.path.basename(scanfile), tempdir)
			print output

		bat.bruteforcescan.writeDumpfile(unpackreports, scans, outputfile, os.path.realpath(options.cfg), tempdir, scans['batconfig']['outputlite'], scans['batconfig']['debug'])

if __name__ == "__main__":
        main(sys.argv)
